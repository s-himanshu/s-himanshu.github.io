lines(data[c('date','sub.metering.2')], col = "red")
lines(data[c('date','sub.metering.3')], col = "blue")
legend("topright", col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
with(data, plot(date, global.reactive.power,
type = "l",
ylab = "Global Reactive Power",
xlab = "datetime"))
dev.off()
dataFile <- "household_power_consumption.txt"
data <- read.table(dataFile, header=TRUE, sep=";", stringsAsFactors=FALSE, dec=".")
subSetData <- data[data$Date %in% c("1/2/2007","2/2/2007") ,]
#str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot1.png", width=480, height=480)
hist(globalActivePower, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
dev.off()
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot3.png", width=480, height=480)
plot(datetime, subMetering1, type="l", ylab="Energy Sub metering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
#str(subSetData)
datetime <- strptime(paste(subSetData$Date, subSetData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalReactivePower <- as.numeric(subSetData$Global_reactive_power)
voltage <- as.numeric(subSetData$Voltage)
subMetering1 <- as.numeric(subSetData$Sub_metering_1)
subMetering2 <- as.numeric(subSetData$Sub_metering_2)
subMetering3 <- as.numeric(subSetData$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
#Chart1
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
#Chart2
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
#Chart3
plot(datetime, subMetering1, type="l", ylab="Energy Sub metering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
#Chart4
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
df <- fread("household_power_consumption.txt", na.strings="?")
df$Date <- as.Date(strptime(df$Date, format = "%d/%m/%Y"))
data <- subset(df, Date >= as.Date(strptime("2007-02-01", format = "%Y-%m-%d")) & Date <= as.Date(strptime("2007-02-02", format = "%Y-%m-%d")) )
data$Global_active_power <- as.numeric(data$Global_active_power)
data$Global_reactive_power <- as.numeric(data$Global_reactive_power)
data$Voltage <- as.numeric(data$Voltage)
data$Globadata$Sub_metering_1 <- as.numeric(data$Sub_metering_1)
data$Sub_metering_1 <- as.numeric(data$Sub_metering_1)
data$Sub_metering_2 <- as.numeric(data$Sub_metering_2)
data$Sub_metering_3 <- as.numeric(data$Sub_metering_3)
hist(data$Global_active_power,
breaks=16,
main="Global Active Power",
col="red",
ylim=c(0, 1200),
xlab ="Global Active Power (kilowatts)")
dev.copy(png, file="plot1.png")
dev.off()
plot(Date,
data$Global_active_power,
type = "l",
ylab ="Global Active Power (kilowatts)",
xlab ="")
dev.copy(png, file="plot2.png")
dev.off()
df$Date <- as.Date(strptime(df$Date, format = "%d/%m/%Y"))
data <- subset(df, Date >= as.Date(strptime("2007-02-01", format = "%Y-%m-%d")) & Date <= as.Date(strptime("2007-02-02", format = "%Y-%m-%d")) )
Date <- paste(data$Date, data$Time)
Date <- strptime(Date, format="%Y-%m-%d %H:%M:%S")
plot(Date,
data$Global_active_power,
type = "l",
ylab ="Global Active Power (kilowatts)",
xlab ="")
dev.copy(png, file="plot2.png")
dev.off()
df <- fread("household_power_consumption.txt", na.strings="?")
df$Date <- as.Date(strptime(df$Date, format = "%d/%m/%Y"))
data <- subset(df, Date >= as.Date(strptime("2007-02-01", format = "%Y-%m-%d")) & Date <= as.Date(strptime("2007-02-02", format = "%Y-%m-%d")) )
Date <- paste(data$Date, data$Time)
Date <- strptime(Date, format="%Y-%m-%d %H:%M:%S")
plot(Date,
data$Global_active_power,
type = "l",
ylab ="Global Active Power (kilowatts)",
xlab ="")
dev.copy(png, file="plot2.png")
dev.off()
df$Date <- as.Date(strptime(df$Date, format = "%d/%m/%Y"))
data <- subset(df, Date >= as.Date(strptime("2007-02-01", format = "%Y-%m-%d")) & Date <= as.Date(strptime("2007-02-02", format = "%Y-%m-%d")) )
Date <- paste(data$Date, data$Time)
Date <- strptime(Date, format="%Y-%m-%d %H:%M:%S")
l <- list(data, Date)
with(l, plot(Date,
data$Sub_metering_1,
type="l",
ylab = "Energy sub metering",
xlab = ""
))
lines(Date, data$Sub_metering_2, col ="red")
lines(Date, data$Sub_metering_3, col = "blue")
legend("topright", pch="----", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot3.png")
dev.off()
df$Date <- as.Date(strptime(df$Date, format = "%d/%m/%Y"))
data <- subset(df, Date >= as.Date(strptime("2007-02-01", format = "%Y-%m-%d")) & Date <= as.Date(strptime("2007-02-02", format = "%Y-%m-%d")) )
Date <- paste(data$Date, data$Time)
Date <- strptime(Date, format="%Y-%m-%d %H:%M:%S")
l <- list(data, Date)
with(l, plot(Date,
data$Sub_metering_1,
type="l",
ylab = "Energy sub metering",
xlab = ""
))
lines(Date, data$Sub_metering_2, col ="red")
lines(Date, data$Sub_metering_3, col = "blue")
legend("topright", pch="----", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot3.png")
dev.off()
df$Date <- as.Date(strptime(df$Date, format = "%d/%m/%Y"))
data <- subset(df, Date >= as.Date(strptime("2007-02-01", format = "%Y-%m-%d")) & Date <= as.Date(strptime("2007-02-02", format = "%Y-%m-%d")) )
Date <- paste(data$Date, data$Time)
Date <- strptime(Date, format="%Y-%m-%d %H:%M:%S")
l <- list(data, Date)
# transform data typs
data$Global_active_power <- as.numeric(data$Global_active_power)
data$Global_reactive_power <- as.numeric(data$Global_reactive_power)
data$Voltage <- as.numeric(data$Voltage)
# open png device
png(filename = "plot4.png", width = 480, height = 480)
par(mfrow=c(2,2))
# plot1
plot(Date,
data$Global_active_power,
type = "l",
ylab ="Global Active Power",
xlab ="")
# plot2
plot(Date,
data$Voltage,
type = "l",
ylab ="Voltage",
xlab ="datetime")
# plot3
with(l, plot(Date,
data$Sub_metering_1,
type="l",
ylab = "Energy sub metering",
xlab = ""))
lines(Date, data$Sub_metering_2, col ="red")
lines(Date, data$Sub_metering_3, col = "blue")
legend("topright", lty=1 ,col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# plot4
plot(Date,
data$Global_reactive_power,
type = "l",
xlab ="datetime")
# close device and write file
dev.off()
data<-read.csv('household_power_consumption.txt',stringsAsFactors = FALSE, sep=';')
# subset data of 2007-02-01 & 2007-02-02
data2<-subset(data,subset=(Date=='1/2/2007'| Date=='2/2/2007'))
# tranform chr column into (correct) numeric columns
for(i in seq(1,length(data2))){
if(typeof(data2[[i]])=='character'){
data2[i]<-as.numeric(data2[[i]])
}
# make plot
plot1<-hist(data2$Global_active_power)
plot(plot1,
main = 'Global Active Power',
xlab = 'Global Active Power(kilowatt)',
col='red',
cex.axis=0.8
)
dev.copy(png,filename='plot1.png')
dev.off()
View(data2)
data2<-transform(data2, datetime=paste(Date,Time))
data2<-transform(data2, datetime=as.POSIXct(datetime,format= '%d/%m/%Y %H:%M:%S'))
data2<-data2[seq(3,length(data2))]
# tranform chr column into (correct) numeric columns
for(i in seq(1,length(data2))){
if(typeof(data2[[i]])=='character'){
data2[i]<-as.numeric(data2[[i]])
}
# make plot
plot(data2[c('datetime','Global_active_power')],
ylab='Global Active Power(kilowatt)',
xlab='',
type='l',
cex.lab=0.8
)
dev.copy(png, filename='plot2.png')
dev.off()
data2<-subset(data,subset=(Date=='1/2/2007'| Date=='2/2/2007'))
# paste Date and Time columns into one column(datetime),
# transform datetime to POSIXct class, and drop the old Date and Time columns
data2<-transform(data2, datetime=paste(Date,Time))
data2<-transform(data2, datetime=as.POSIXct(datetime,format= '%d/%m/%Y %H:%M:%S'))
data2<-data2[seq(3,length(data2))]
# tranform chr column into (correct) numeric columns
for(i in seq(1,length(data2))){
if(typeof(data2[[i]])=='character'){
data2[i]<-as.numeric(data2[[i]])
}
# make plot
with(data2,{
plot(datetime,Sub_metering_1,type='l',
xlab='',
ylab='Energy sub metering')
lines(datetime,Sub_metering_2,col='red')
lines(datetime,Sub_metering_3,col='blue')
legend('topright',
legend=c('Sub_metering_1','Sub_metering_2','Sub_metering_3'),
lwd=c(1,1,1),
col=c('black','red','blue'))
})
dev.copy(png, filename='plot3.png')
dev.off()
data2<-subset(data,subset=(Date=='1/2/2007'| Date=='2/2/2007'))
# paste Date and Time columns into one column(datetime),
# transform datetime to POSIXct class, and drop the old Date and Time columns
data2<-transform(data2, datetime=paste(Date,Time))
data2<-transform(data2, datetime=as.POSIXct(datetime,format= '%d/%m/%Y %H:%M:%S'))
data2<-data2[seq(3,length(data2))]
# tranform chr column into (correct) numeric columns
for(i in seq(1,length(data2))){
if(typeof(data2[[i]])=='character'){
data2[i]<-as.numeric(data2[[i]])
}
# make plot
par(mfrow=c(2,2))
with(data2,{
plot(datetime,Global_active_power,type='l',xlab='',ylab='Global Active Power')
plot(datetime,Voltage,type='l')
plot(datetime,Sub_metering_1,type='l',
xlab='',
ylab='Energy sub metering')
lines(datetime,Sub_metering_2,col='red')
lines(datetime,Sub_metering_3,col='blue')
legend('topright',
legend=c('Sub_metering_1','Sub_metering_2','Sub_metering_3'),
lwd=c(1,1,1),
bty='n',
cex=0.6,
col=c('black','red','blue'))
plot(datetime,Global_reactive_power,type='l')
})
dev.copy(png,filename='plot4.png')
dev.off()
clear()
library(ggplot2)
data(mpg)
str(mpg)
qplot(drv, hwy, data=mpg)
library(ggplot2)
str(mpg)
qplot(disp, hwy, data=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, col=drv)
qplot(displ, hwy, data=mpg, col=drv, geom = c("point"))
qplot(displ, hwy, data=mpg, col=drv, geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg, col=red, geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg, col="red", geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(hwy, data=mpg, geom = c("point", "smooth"))
qplot(hwy, data=mpg, fill=drv
)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(displ, hwy, data=mpg, facets = drv~., binwidth=2)
qplot(hwy, data=mpg, facets = drv~., binwidth=2)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(hwy, data=mpg, facets = drv~., binwidth = 2)
str(macs)
str(maacs)
qplot(hwy, data=mpg, facets = drv~., binwidth = 3)
qplot(hwy, data=mpg, facets = drv~., binwidth = 1)
qplot(hwy, data=mpg, facets = drv~., binwidth = 3)
setwd("C:/Coursera/")
install.packages(c("boot", "curl", "gtable", "nlme", "openssl", "rmarkdown", "scales"))
setwd("./Data Science Specialization/Exploratory Data Analysis/Course Project 2/")
source('C:/Coursera/Data Science Specialization/Exploratory Data Analysis/Course Project 2/plot6.R')
View(NEI)
nei[,fips==06037]
NEI[,fips==06037]
NEI[,$fips==06037]
NEI[,NEI$fips==06037]
NEI[,NEI$fips=="06037"]
library(dplyr)
View(SCC)
write.csv(NEI, file="NEI.csv")
unique(NEI$fips)
LA.vehicles = subset(NEI, fips==06037 & type == 'ON-ROAD')
LA.vehicles = subset(NEI, fips=="06037" & type == 'ON-ROAD')
source('C:/Coursera/Data Science Specialization/Exploratory Data Analysis/Course Project 2/plot6.R')
View(LA.vehicles)
View(BC.vehicles)
vehiclesBL <- rbind(BC.vehicles, LA.vehicles)
View(vehiclesBL)
View(arrange(vehiclesBL)
)
plot6 <- aggregate(vehiclesBL[, 'Emissions'], by=list(vehiclesBL$year, vehiclesBL$City), sum)
colnames(plot6) <- c('Year', 'Emissions')
View(plot6)
plot6 <- aggregate(vehiclesBL[, 'Emissions'], by=list(vehiclesBL$year, vehiclesBL$City), sum)
colnames(plot6) <- c('City', Year', 'Emissions')
names(plot6)
names(plot6) <- c('City', 'Year', 'Emissions')
names(plot6) <- c('Year', City', 'Emissions')
names(plot6) <- c('Year', 'City', 'Emissions')
View(plot6)
scale(vehiclesBL$Emissions)
scale(plot6$Emissions)
plot6$Scaled <- scale(plot6$Emissions)
plot(plot6$Year, plot6$Scaled)
View(plot6)
rm(plot6$Scaled)
rm(plot6)
plot6 <- aggregate(vehiclesBL[, 'Emissions'], by=list(vehiclesBL$year, vehiclesBL$City), sum)
colnames(plot6) <- c('City', Year', 'Emissions')
plot6 <- aggregate(vehiclesBL[, 'Emissions'], by=list(vehiclesBL$year, vehiclesBL$City), sum)
names(plot6) <- c('Year', City', 'Emissions')
names(plot6) <- c('Year', 'City', 'Emissions')
source('C:/Coursera/Data Science Specialization/Exploratory Data Analysis/Course Project 2/plot6.R')
View(BC.vehicles)
source('C:/Coursera/Data Science Specialization/Exploratory Data Analysis/Course Project 2/plot6.R')
View(plot6)
ggplot(data=vehiclesBL, aes(x=Year, y=Change)) + geom_line()
View(vehiclesBL)
ggplot(data=plot6, aes(x=Year, y=Change)) + geom_line()
ggplot(data=plot6, aes(x=Year, y=Change)) + geom_line() +facet_grid(~.City)
ggplot(data=plot6, aes(x=Year, y=Change, color=City)) + geom_line() +facet_grid(~.City)
ggplot(data=plot6, aes(x=Year, y=Change, colour=City)) + geom_line() +facet_grid(~.City)
ggplot(pd, aes(x=Year, y=Change, colour=City)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1, method="loess") +
ggtitle("Vehicle Emissions in Baltimore vs. LA")
ggplot(plot6, aes(x=Year, y=Change, colour=City)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1, method="loess") +
ggtitle("Vehicle Emissions in Baltimore vs. LA")
ggplot(plot6, aes(x=Year, y=Change, colour=City)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1, method="loess") +
ggtitle("Vehicle Emissions in Baltimore vs. LA")+ylab("Change in PM'[2.5]")
ggplot(plot6, aes(x=Year, y=Change, colour=City)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1, method="loess") +
ggtitle("Vehicle Emissions in Baltimore vs. LA")+ylab("Change in PM''[2.5]")
ggplot(plot6, aes(x=Year, y=Change, colour=City)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1, method="loess") +
ggtitle("Vehicle Emissions in Baltimore vs. LA")+ylab("Change in PM"'[2.5])
)
)''
ggplot(plot6, aes(x=Year, y=Change, colour=City)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1, method="loess") +
ggtitle("Vehicle Emissions in Baltimore vs. LA")+ylab("Change in PM"''[2.5])
ggplot(plot6, aes(x=Year, y=Change, colour=City)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1, method="loess") +
ggtitle("Vehicle Emissions in Baltimore vs. LA")+ylab("Change in PM2.5")
warnings()
source('C:/Coursera/Data Science Specialization/Exploratory Data Analysis/Course Project 2/plot6.R')
g
source('C:/Coursera/Data Science Specialization/Exploratory Data Analysis/Course Project 2/plot6.R')
rm()
rm(all())
remove(... )
rm(all(*))
rm(*)
install.packages("kernlab")
data(spam)
library(kernlab)
data(spam)
summary(spam)
getwd()
setwd("../../Reproducible Research/Course Project 1/RepData_PeerAssessment1/")
myedit("PA1_template.Rmd")
edit("PA1_template.Rmd")
emissionbyyear <- tapply(NEI$Emissions, NEI$year, sum)
#2. Plot the results
plot(emissionbyyear, type="l", xlab="Year", ylab="Total PM2.5 Emissions (tons)")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
getwd()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
dir())
dir()
getwd()
setwd("../")
dir()
setwd("../")
dir()
setwd("../")
dir()
setwd("./Exploratory Data Analysis/Course Project 2/")
dir()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
emissionbyyear <- tapply(NEI$Emissions, NEI$year, sum)
emissionbyyear
plot(emissionbyyear, type="l", xlab="Year", ylab="Total PM2.5 Emissions (tons)")
plot(emissionbyyear, type="l", ylab="Total PM2.5 Emissions (tons)")
library("ggplot2")
library("dplyr")
# 2. Subset the emissions from Baltimore City (fips==24510)
BaltimoreCity<- NEI[NEI$fips=="24510",]
# 3. Obtain the total Emission per year including the variable "type"
emissionsbyyear <- ddply(BaltimoreCity, .(year, type), function(x) sum(x$Emissions))
colnames(emissionsbyyear) <-c("Year", "Type", "TotalEmissions")
# 4. Plotting by type
qplot(Year, TotalEmissions, data=emissionsbyyear,
color = Type, geom=c("point", "smooth"))
library(plyr)
library(dplyr)
BaltimoreCity<- NEI[NEI$fips=="24510",]
emissionsbyyear <- ddply(BaltimoreCity, .(year, type), function(x) sum(x$Emissions))
colnames(emissionsbyyear) <-c("Year", "Type", "TotalEmissions")
qplot(Year, TotalEmissions, data=emissionsbyyear,
color = Type, geom=c("point", "smooth"))
setwd("c:\Coursera/")
setwd("c:\Coursera")
setwd("c://Coursera")
pbeta(0.75,1,1)
pbeta(0.75,2,1)
qbeta(0.75,2,1)
qbeta(0.5,2,1)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(ElemStatLearn)
install.packages(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data("vowel.train")
data("vowel.test")
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
View(vowel.test)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
library(caret)
install.packages("caret")
library(caret)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
install.packages("e1071")
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
View(BaltimoreCity)
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
set.seed(62433)
mod_rf <- train(diagnosis ~ ., data = training, method = "rf")
mod_gbm <- train(diagnosis ~ ., data = training, method = "gbm")
mod_lda <- train(diagnosis ~ ., data = training, method = "lda")
pred_rf <- predict(mod_rf, testing)
pred_gbm <- predict(mod_gbm, testing)
pred_lda <- predict(mod_lda, testing)
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis = testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(pred_rf, testing$diagnosis)$overall[1]
confusionMatrix(pred_gbm, testing$diagnosis)$overall[1]
confusionMatrix(pred_lda, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]
keep_md: yes
html_document
install.packages("doParallel")
View(training)
summary(training)
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method=method))
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method="rf"))
library(caret)
system.time(trainingModel <- train(classe ~ ., data=DTrainCS, method="rf"))
load(file="trainingModel.RData", verbose=TRUE)
getwd()
load(file="./Data Science Specialization/Practical Machine Learning/PredictionAssignmentProject/trainingModel.RData", verbose=TRUE)
load(file="./Data Science Specialization/Practical Machine Learning/PredictionAssignmentProject/data/trainingModel.RData", verbose=TRUE)
class(trainingModel)
train
train.formula
getwd()
setwd("./Data Science Specialization/Practical Machine Learning/PredictionAssignmentProject/data/")
testdata<- read.csv("pml-testing.csv")
train.formula(train, data=testdata)
train.formula(form=TRUE, data=testdata)
